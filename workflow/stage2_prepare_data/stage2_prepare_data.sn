# -*- snakemake -*-
import os.path
import subprocess
from multiprocessing import cpu_count

SUBSAMPLE_IDS=10000
CHR="22"
DATA_DIR = "/proj/sens2017538/nobackup/ExomeSeq2ndRel/marcin/"
DATA_PREFIX = "ukb23155_c22_b0_v1"
OUTPUT_PREFIX = "sntst_GRCh38_norel_rnd" + str(SUBSAMPLE_IDS) + "_chr" + CHR
IDS_TO_KEEP_FILE = DATA_DIR + "ids_to_keep.txt"

# Targets
rule targets:
        input:
                #bed = DATA_DIR + OUTPUT_PREFIX + ".bed",
                #bim = DATA_DIR + OUTPUT_PREFIX + ".bim",
                #fam = DATA_DIR + OUTPUT_PREFIX + ".fam",
                #bgen = DATA_DIR + OUTPUT_PREFIX + ".bgen",
                bgindex = DATA_DIR + OUTPUT_PREFIX + ".bgen.bgi",
                old_sample = DATA_DIR + OUTPUT_PREFIX + ".sample.old",
                afreq = DATA_DIR + OUTPUT_PREFIX + ".afreq",
                ids_keep_file = IDS_TO_KEEP_FILE + ".processed"

rule compute_afreq:
        input:
                bgen = DATA_DIR + OUTPUT_PREFIX + ".bgen"
        output:
                afreq = DATA_DIR + OUTPUT_PREFIX + ".afreq",
                log = DATA_DIR + OUTPUT_PREFIX + ".log"
        params:
                input = DATA_DIR + OUTPUT_PREFIX
        threads: 4
        envmodules:
                "bioinfo-tools",
                "plink2"
        shell:
                """
                plink2 \
                        --bfile {params.input} \
                        --allow-extra-chr \
                        --threads {threads} \
                        --freq

                mv plink2.afreq {output.afreq}
                mv plink2.log {output.log}
                """

rule index_bgen:
        input:
                bgen = DATA_DIR + OUTPUT_PREFIX + ".bgen"
        output:
                DATA_DIR + OUTPUT_PREFIX + ".bgen.bgi"
        envmodules:
                "bioinfo-tools",
                "bgen"
        shell:
                """
                bgenix -g {input.bgen} -index
                """

rule fix_sample_file:
        input:
                sample_file = DATA_DIR + OUTPUT_PREFIX + ".sample"
        output:
                old_sample_file = DATA_DIR + OUTPUT_PREFIX + ".sample.old"
        shell:
                """
                cp {input.sample_file} {output.old_sample_file}
                tail --lines=+3 {output.old_sample_file} > {input.sample_file}
                """

rule convert_to_bgen:
        input:
                bed = DATA_DIR + OUTPUT_PREFIX + ".bed",
                bim = DATA_DIR + OUTPUT_PREFIX + ".bim",
                fam = DATA_DIR + OUTPUT_PREFIX + ".fam"
        output:
                bgen = DATA_DIR + OUTPUT_PREFIX + ".bgen",
                sample_file = DATA_DIR + OUTPUT_PREFIX + ".sample"
        threads: 4
        envmodules:
                "bioinfo-tools",
                "plink2"
        params:
                output = DATA_DIR + OUTPUT_PREFIX,
                format = "bgen-1.2 bits=8"
        shell:
                """
                plink2 \
                        --pgen {input.bed} \
                        --pvar {input.bim} \
                        --psam {input.fam} \
                        --allow-extra-chr \
                        --threads {threads} \
			--maj-ref 'force' \
                        --export {params.format} \
                        --out {params.output}
                """

rule filter_samples_and_multiallelic:
        input:
                gen = DATA_DIR + DATA_PREFIX + ".bed",
                var = DATA_DIR + DATA_PREFIX + ".bim",
                sam = DATA_DIR + DATA_PREFIX + ".fam",
                ids = IDS_TO_KEEP_FILE + ".processed"
        output:
                bed = DATA_DIR + OUTPUT_PREFIX + ".bed",
                bim = DATA_DIR + OUTPUT_PREFIX + ".bim",
                fam = DATA_DIR + OUTPUT_PREFIX + ".fam"
        threads: 4
        envmodules:
                "bioinfo-tools",
                "plink2"
        params:
                output = DATA_DIR + OUTPUT_PREFIX,
                call_rate = 0.01
        shell:
                """
                plink2 \
                        --pgen {input.gen} \
                        --pvar {input.var} \
                        --psam {input.sam} \
                        --keep {input.ids} \
                        --snps-only 'just-acgt' \
                        --geno {params.call_rate} \
                        --threads {threads} \
                        --allow-extra-chr \
                        --maj-ref 'force' \
                        --make-bed \
                        --out {params.output}
                """

rule process_ids_file:
        input:
                ids = IDS_TO_KEEP_FILE
        output:
                IDS_TO_KEEP_FILE + ".processed"
        run:
                if list({SUBSAMPLE_IDS})[0] > 0:
                        shell("shuf -n {SUBSAMPLE_IDS} {input.ids} > {output}")
                else:
                        shell("cp {input.ids} {output}")
