import os.path
import subprocess
from multiprocessing import cpu_count

def getTraits(filename):
        with open(filename) as f:
                firstline = f.readline().rstrip().split(" ")
        print("First_line: " + str(firstline))
        return(firstline)

[marcin@sens2017538-bianca saige_tests]$ cat Snakefile
import os.path
import subprocess
from multiprocessing import cpu_count

def getTraits(filename):
        with open(filename) as f:
                firstline = f.readline().rstrip().split(" ")
        print("First_line: " + str(firstline))
        return(firstline)

####################################################################################################
##                                         CONFIGURATION                                          ##
####################################################################################################

DATA_PATH = "/proj/sens2017538/nobackup/ExomeSeq2ndRel/marcin/"
DATA_PLINK = DATA_PATH + "sntst_GRCh38_norel_rnd1000_chr22"
BIN_PATH = DATA_PATH + "experiments/saige_tests/extdata3/"
PHENO_DATA = DATA_PATH + "experiments/workflow/results/simulated_phenotypes.txt"
CONTAINER = DATA_PATH + "experiments/saige_tests/saige_1.0.4.sif"
OUTPUT_PATH = DATA_PATH + "experiments/saige_tests/output/"
NUM_RND_MRK = "3000"
REL_CUTOFF = "0.125"

TRAITS = getTraits(PHENO_DATA)
IID = TRAITS[0]
TRAITS.pop(0)
#TRAITS = ['y1']
####################################################################################################

# Targets
rule targets:
        input:
                expand(OUTPUT_PATH + "trait_{trait}.SAIGE.bgen.gene_based.txt", trait=TRAITS),
                expand(OUTPUT_PATH + "trait_{trait}.SAIGE.bgen.sva.txt", trait=TRAITS),

rule prepare_sparse_kinship_matrix:
        input:
                DATA_PLINK + ".bed",
                DATA_PLINK + ".bim",
                DATA_PLINK + ".fam"
        output:
                grm = OUTPUT_PATH + "sparseGRM_relatednessCutoff_" + REL_CUTOFF + "_" + NUM_RND_MRK + "_randomMarkersUsed.sparseGRM.mtx",
                grm_sample = OUTPUT_PATH + "sparseGRM_relatednessCutoff_" + REL_CUTOFF + "_" + NUM_RND_MRK + "_randomMarkersUsed.sparseGRM.mtx.sampleIDs.txt"
        params:
                input_prefix = DATA_PLINK,
                container_path = CONTAINER,
                bin_path = BIN_PATH,
                out_prefix = OUTPUT_PATH + "sparseGRM",
                rel_cutoff = REL_CUTOFF,
                num_rnd_mrk = NUM_RND_MRK
        threads: 4
        shell:
                """
                singularity run {params.container_path} Rscript {params.bin_path}/createSparseGRM.R \
                --plinkFile={params.input_prefix} \
                --nThreads={threads} \
                --outputPrefix={params.out_prefix} \
                --numRandomMarkerforSparseKin={params.num_rnd_mrk} \
                --relatednessCutoff={params.rel_cutoff}
                """

rule fit_null_model:
        input:
                pheno = PHENO_DATA,
                grm = rules.prepare_sparse_kinship_matrix.output.grm,
                grm_sample = rules.prepare_sparse_kinship_matrix.output.grm_sample,
        output:
                var_ratio_file = OUTPUT_PATH + "trait_{trait}.varianceRatio.txt",
                model_file = OUTPUT_PATH + "trait_{trait}.rda"
        params:
                input_prefix = DATA_PLINK,
                container_path = CONTAINER,
                bin_path = BIN_PATH,
                id_column = IID,
                out_prefix = OUTPUT_PATH + "trait_{trait}",
                trait_type = "quantitative",
                inv_norm = "TRUE",
                LOCO = "FALSE",
                tau_init = "1,0",
                overwrite_varest = "TRUE",
                skip_varest = "FALSE",
                use_sparse_grm = "TRUE"
        threads: 4
        shell:
                """
                echo "Fitting null model for: {wildcards.trait}"
                singularity run {params.container_path} Rscript {params.bin_path}/step1_fitNULLGLMM.R \
                --plinkFile={params.input_prefix} \
                --phenoFile={input.pheno} \
                --phenoCol={wildcards.trait} \
                --sampleIDColinphenoFile={params.id_column} \
                --traitType={params.trait_type} \
                --invNormalize={params.inv_norm} \
                --outputPrefix={params.out_prefix} \
                --nThreads={threads} \
                --LOCO={params.LOCO} \
                --tauInit={params.tau_init} \
                --IsOverwriteVarianceRatioFile={params.overwrite_varest} \
                --skipVarianceRatioEstimation={params.skip_varest} \
                --useSparseGRMtoFitNULL={params.use_sparse_grm} \
                --sparseGRMFile={input.grm} \
                --sparseGRMSampleIDFile={input.grm_sample}
                """

rule run_gene_based:
        input:
                varRatioFile =  rules.fit_null_model.output.var_ratio_file,
                nullModelFile = rules.fit_null_model.output.model_file,
                grm = rules.prepare_sparse_kinship_matrix.output.grm,
                grm_sample = rules.prepare_sparse_kinship_matrix.output.grm_sample,
        output:
                outputFile = OUTPUT_PATH + "trait_{trait}.SAIGE.bgen.gene_based.txt"
        params:
                container_path = CONTAINER,
                bin_path = BIN_PATH,
                bgen_file = DATA_PLINK + ".bgen",
                bgen_file_idx = DATA_PLINK + ".bgen.bgi",
                sample_file = DATA_PLINK + ".sample.ok",
                max_maf_per_grp = "0.0001,0.001,0.01",
                grp_file = "./output/region.txt",
                grp_test_cat = "lof",
                min_maf = 0.0001,
                min_mac = 1,
                LOCO = "FALSE",
        threads: 4
        shell:
                """
                echo "Fitting gene-based variant association model for {wildcards.trait}..."
                singularity run {params.container_path} Rscript {params.bin_path}step2_SPAtests.R \
                --bgenFile={params.bgen_file} \
                --bgenFileIndex={params.bgen_file_idx} \
                --minMAF={params.min_maf} \
                --minMAC={params.min_mac} \
                --LOCO={params.LOCO} \
                --sampleFile={params.sample_file} \
                --GMMATmodelFile={input.nullModelFile} \
                --SAIGEOutputFile={output.outputFile} \
                --sparseGRMFile={input.grm} \
                --sparseGRMSampleIDFile={input.grm_sample} \
                --maxMAF_in_groupTest={params.max_maf_per_grp} \
                --groupFile={params.grp_file} \
                --annotation_in_groupTest={params.grp_test_cat} \
                """
rule run_SVA:
        input:
                varRatioFile =  rules.fit_null_model.output.var_ratio_file,
                nullModelFile = rules.fit_null_model.output.model_file,
                grm = rules.prepare_sparse_kinship_matrix.output.grm,
                grm_sample = rules.prepare_sparse_kinship_matrix.output.grm_sample,
        output:
                outputFile = OUTPUT_PATH + "trait_{trait}.SAIGE.bgen.sva.txt"
        params:
                container_path = CONTAINER,
                bin_path = BIN_PATH,
                bgen_file = DATA_PLINK + ".bgen",
                bgen_file_idx = DATA_PLINK + ".bgen.bgi",
                sample_file = DATA_PLINK + ".sample.ok",
                min_maf = 0.0001,
                min_mac = 1,
                LOCO = "FALSE",
        threads: 4
        shell:
                """
                echo "Fitting single variant association model for {wildcards.trait}..."
                singularity run {params.container_path} Rscript {params.bin_path}step2_SPAtests.R \
                --bgenFile={params.bgen_file} \
                --bgenFileIndex={params.bgen_file_idx} \
                --minMAF={params.min_maf} \
                --minMAC={params.min_mac} \
                --LOCO={params.LOCO} \
                --sampleFile={params.sample_file} \
                --GMMATmodelFile={input.nullModelFile} \
                --SAIGEOutputFile={output.outputFile} \
                --sparseGRMFile={input.grm} \
                --sparseGRMSampleIDFile={input.grm_sample} \
               """
